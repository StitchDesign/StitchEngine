// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios17.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name StitchEngine
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension StitchEngine.GraphCalculatable {
  @_Concurrency.MainActor public func calculate(from nodeIds: Swift.Set<Self.Node.ID>)
  @_Concurrency.MainActor public func calculate(_ id: Self.Node.ID)
  @_Concurrency.MainActor public func calculate(_ idSet: Swift.Set<Self.Node.ID>)
  @_Concurrency.MainActor public func calculate(_ idList: [Self.Node.ID])
}
extension StitchEngine.GraphCalculatable {
  @_Concurrency.MainActor public func getChangedDownstreamInputIds(evalResult: Self.Node.EvalResult, sourceNode: Self.Node, existingOutputsValues: [[Self.Node.PortData]], outputCoordinates: [Self.Node.OutputRow.RowID]) -> Swift.Set<Self.Node.InputRow.ID>
  @_Concurrency.MainActor public func updateDownstreamInputs(sourceNode: Self.Node, flowValues: [Self.Node.PortData], outputCoordinate: Self.Node.OutputRow.RowID) -> Swift.Set<Self.Node.InputRow.ID>
}
extension StitchEngine.GraphCalculatable {
  @_Concurrency.MainActor public func updateTopologicalData()
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol GraphCalculatable<Node> : AnyObject {
  associatedtype Node : StitchEngine.NodeCalculatable
  typealias TopologicalData = StitchEngine.GraphTopologicalData<Self.Node>
  var topologicalData: Self.TopologicalData { get }
  var nodes: [Self.Node.ID : Self.Node] { get set }
  var portsToUpdate: Swift.Set<StitchEngine.NodePortType<Self.Node>> { get set }
  var shouldResortPreviewLayers: Swift.Bool { get set }
  @_Concurrency.MainActor func getNodeViewModel(id: Self.Node.ID) -> Self.Node?
  @_Concurrency.MainActor func updateOrderedPreviewLayers()
  @_Concurrency.MainActor func getNodesToAlwaysRun() -> Swift.Set<Self.Node.ID>
  @_Concurrency.MainActor func getAnimationNodes() -> Swift.Set<Self.Node.ID>
  @_Concurrency.MainActor func evaluateComponentOutputs()
}
#else
public protocol GraphCalculatable : AnyObject {
  associatedtype Node : StitchEngine.NodeCalculatable
  typealias TopologicalData = StitchEngine.GraphTopologicalData<Self.Node>
  var topologicalData: Self.TopologicalData { get }
  var nodes: [Self.Node.ID : Self.Node] { get set }
  var portsToUpdate: Swift.Set<StitchEngine.NodePortType<Self.Node>> { get set }
  var shouldResortPreviewLayers: Swift.Bool { get set }
  @_Concurrency.MainActor func getNodeViewModel(id: Self.Node.ID) -> Self.Node?
  @_Concurrency.MainActor func updateOrderedPreviewLayers()
  @_Concurrency.MainActor func getNodesToAlwaysRun() -> Swift.Set<Self.Node.ID>
  @_Concurrency.MainActor func getAnimationNodes() -> Swift.Set<Self.Node.ID>
  @_Concurrency.MainActor func evaluateComponentOutputs()
}
#endif
extension StitchEngine.GraphCalculatable {
  public var connections: Self.TopologicalData.Connections {
    get
  }
  public var shallowDownstreamNodes: Self.TopologicalData.ShallowDownstreamNodesDict {
    get
  }
  public var nodesToRunOnGraphStep: Swift.Set<Self.Node.ID> {
    get
  }
  public func setNodesForNextGraphStep(_ nodeIds: Swift.Set<Self.Node.ID>)
  public func immediatelyUpstreamNodes(for node: Self.Node.ID) -> Swift.Set<Self.Node.ID>
  @_Concurrency.MainActor public func updatePortViews()
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol NodeCalculatable<InputRow, OutputRow> : AnyObject, Swift.Identifiable {
  associatedtype InputRow : StitchEngine.InputNodeRowCalculatable where Self.ID == Self.InputRow.ID.NodeId, Self.InputRow.OutputRowID == Self.OutputRow.ID, Self.InputRow.PortData == Self.OutputRow.PortData, Self.InputRow.ID.NodeId == Self.InputRow.OutputRowID.NodeId
  associatedtype OutputRow : StitchEngine.NodeRowCalculatable
  associatedtype EvalResult : StitchEngine.NodeEvalResult where Self.EvalResult.PortData == Self.InputRow.PortData
  typealias InputPortData = Self.InputRow.PortData
  typealias NodeId = Self.InputRow.RowID.NodeId
  typealias PortData = Self.InputRow.PortData
  @_Concurrency.MainActor func inputsWillUpdate(values: [[Self.InputPortData]])
  @_Concurrency.MainActor func evaluate() -> Self.EvalResult?
  @_Concurrency.MainActor var inputsObservers: [Self.InputRow] { get set }
  @_Concurrency.MainActor var outputsObservers: [Self.OutputRow] { get set }
  @_Concurrency.MainActor func getInputRowObserver(for id: Self.InputRow.RowID.PortId) -> Self.InputRow?
  var id: Self.NodeId { get set }
  var isGroupNode: Swift.Bool { get }
  var requiresOutputValuesChange: Swift.Bool { get }
  @_Concurrency.MainActor var inputsValuesList: [[Self.EvalResult.PortData]] { get }
  var isComponentOutputSplitter: Swift.Bool { get }
}
#else
public protocol NodeCalculatable : AnyObject, Swift.Identifiable {
  associatedtype InputRow : StitchEngine.InputNodeRowCalculatable where Self.ID == Self.InputRow.ID.NodeId, Self.InputRow.OutputRowID == Self.OutputRow.ID, Self.InputRow.PortData == Self.OutputRow.PortData, Self.InputRow.ID.NodeId == Self.InputRow.OutputRowID.NodeId
  associatedtype OutputRow : StitchEngine.NodeRowCalculatable
  associatedtype EvalResult : StitchEngine.NodeEvalResult where Self.EvalResult.PortData == Self.InputRow.PortData
  typealias InputPortData = Self.InputRow.PortData
  typealias NodeId = Self.InputRow.RowID.NodeId
  typealias PortData = Self.InputRow.PortData
  @_Concurrency.MainActor func inputsWillUpdate(values: [[Self.InputPortData]])
  @_Concurrency.MainActor func evaluate() -> Self.EvalResult?
  @_Concurrency.MainActor var inputsObservers: [Self.InputRow] { get set }
  @_Concurrency.MainActor var outputsObservers: [Self.OutputRow] { get set }
  @_Concurrency.MainActor func getInputRowObserver(for id: Self.InputRow.RowID.PortId) -> Self.InputRow?
  var id: Self.NodeId { get set }
  var isGroupNode: Swift.Bool { get }
  var requiresOutputValuesChange: Swift.Bool { get }
  @_Concurrency.MainActor var inputsValuesList: [[Self.EvalResult.PortData]] { get }
  var isComponentOutputSplitter: Swift.Bool { get }
}
#endif
extension StitchEngine.NodeCalculatable {
  @_Concurrency.MainActor public func updatePortViewModels()
}
public protocol NodeEvalResult {
  associatedtype PortData : Swift.Equatable
  var outputsValues: [[Self.PortData]] { get set }
  var willEvalAgain: Swift.Bool { get set }
  var mustEvalAllDownstreamNodes: Swift.Bool { get set }
}
public protocol NodeRowCalculatable : AnyObject, Swift.Identifiable where Self.ID : StitchEngine.NodeRowId {
  associatedtype RowID where Self.ID == Self.RowID
  associatedtype PortData : Swift.Equatable
  var values: [Self.PortData] { get set }
  var containsUpstreamConnection: Swift.Bool { get }
  func updateValues(_ values: [Self.PortData])
  func updatePortViewModels()
}
public protocol InputNodeRowCalculatable : StitchEngine.NodeRowCalculatable {
  associatedtype OutputRowID : StitchEngine.NodeRowId
  var values: [Self.PortData] { get set }
  func didInputsUpdate(newValues: [Self.PortData], oldValues: [Self.PortData])
  var upstreamOutputCoordinate: Self.OutputRowID? { get }
}
extension StitchEngine.InputNodeRowCalculatable {
  public var containsUpstreamConnection: Swift.Bool {
    get
  }
}
extension StitchEngine.InputNodeRowCalculatable {
  @_Concurrency.MainActor public func setValuesInInput(_ values: [Self.PortData])
}
extension Swift.Array where Element : StitchEngine.NodeRowCalculatable {
  public var values: [[Element.PortData]] {
    get
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol NodeRowId<NodeId> : Swift.Hashable, Swift.Identifiable {
  associatedtype NodeId : Swift.Comparable, Swift.Hashable, Swift.Identifiable
  associatedtype PortId : Swift.Identifiable
  var portType: Self.PortId { get set }
  var nodeId: Self.NodeId { get set }
  init(portId: Swift.Int, nodeId: Self.NodeId)
}
#else
public protocol NodeRowId : Swift.Hashable, Swift.Identifiable {
  associatedtype NodeId : Swift.Comparable, Swift.Hashable, Swift.Identifiable
  associatedtype PortId : Swift.Identifiable
  var portType: Self.PortId { get set }
  var nodeId: Self.NodeId { get set }
  init(portId: Swift.Int, nodeId: Self.NodeId)
}
#endif
public enum NodePortType<Node> : Swift.Hashable where Node : StitchEngine.NodeCalculatable {
  case input(Node.InputRow.ID)
  case allOutputs(Node.ID)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: StitchEngine.NodePortType<Node>, b: StitchEngine.NodePortType<Node>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class GraphTopologicalData<Node> where Node : StitchEngine.NodeCalculatable {
  public typealias InputRowId = Node.InputRow.RowID
  public typealias OutputRowId = Node.OutputRow.RowID
  public typealias ShallowDownstreamNodesDict = [Node.ID : Swift.Set<Node.ID>]
  public typealias Connections = [StitchEngine.GraphTopologicalData<Node>.OutputRowId : Swift.Set<StitchEngine.GraphTopologicalData<Node>.InputRowId>]
  public init()
  @objc deinit
}
